Object Oriented Programming : 
______________________________

It is an approach, that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object : 

   An object is a real world entity, that which possess 3 characterstics known as

	  (i) State

	 (ii) Behaviour

	(iii) Identity 


OOPS features : 
________________


	Encapsulation : Wrapping up of data and functions into a single unit known as Encapsulation. 

	Abstraction : Hiding the irrelevant details of an object, that do not contribute to its essential
			characterstics known as abstraction. 

		*** Encapsulation focuses on showing the relevant details, where abstraction focuses on 
			hiding the irrelevant details ***

	Inheritance : Deriving a new entity from already existing entity known as inheritance, through 			inheritance we can reduce the size of the program.	

	Polymorphism : The ability to take more than one form known as polymorphism. 


class : A class is a template or blueprint, that which contains the combination of data members and member functions.  Members of the class can be accessable by using the instance of the class. 

class class_name 
{
    data members;
    member functions;
}

Why Java : 
____________

1) Platform Independence : Write Once and run anywhere. 

2) Console Applications

3) Windows Applications

4) Web Applications 

5) Packages : Contains group of related classes and interfaces, that which belongs to one common group. If you want to overcome the naming conflicts between classes, then we need the help of packages. 


Java Features : 
_________________


	1) Simple : Java uses simple C/C++ syntaxes, as a programmer no need to take care of internal
			details like memory management etc... as how much memory allocated to run the program
			the same amount of memory will be reallocated automatically. 

	2) Object Oriented : Java supports all object oriented programming features. 

	3) Compiled and Interpreted : Java programs are compiled first, during compilation java code will 
		be converted into bytecode, then .class file will be created. In Interpretation, it reads the
		bytecode line by line and executes. 

	4) Portable : Ability to run the program without changing source code. Java programs are programs, 
		that can run on any env, without changing the source code. 

	5) Securable : Java supports various levels of security, as 

		-> Compiler Level 

		-> Bytecode Level

		-> Class Loader

	6) Distributed 

		By using java, we can implement all distributed or robust applications. 


Java Architecture : 
_____________________


	1) Java Program : Java code, that which stored with extension .java 

	2) Java Class : Java program after compilation, its converted into bytecode, then .class file 
				will be created. 

	3) JVM (Java Virtual Machine) 

		It contains various components as 

			(i) Class Loader : Used to load all classes which are required to run the program.

			There are 2 types of class loaders known as

				(a) Primordial Class Loader

					Used to load all system classes which are required to run the program

				(b) Class Loader Objects  
			
					Used to load all custom classes which are required to run the program.

			(ii) JIT Compiler : Used to convert bytecode into CPU specific format. 

			(iii) Execution Manager : Contains QUEUE of programs, which are ready to run, where
				we can execute the program. 

		*** Before execution, it needs to undergone security authentication ***

	4) Java API : It provides runtime env, that which allows you to run the java program. 

			JDK and JRE are falling under this. 



Data Types : 
______________

There are 2 types of data types as

	1) Value Types (Value Types will be stored in Stack Memory) 

		int, float, double, char, boolean 

	2) Reference Types (Reference types will be stored in HEAP memory) 

		String, Object and custom classes 


System.out.println() : used to display any value or message. 

	System -> class

	out -> Console

	println() -> method.

System.out.println("Welcome to Java Programming...");

You can define method main() as 

public static void main(String[] args) {
...
...
...
}

main() method must be static, as no class object supposed to call the method main. 

Access Modifiers : 
__________________


	1) private : Allows you to access members within current class. 

	2) public : Allows you to access members in entire application. 

	3) protected : Allows you to access members within current/derived classes. 
	
	4) friendly : By default, java possess friendly access modifier, allows you to 
		access members within all classes of current package. 



Give me 5 mins we will start 

You can create an object, as 

class_name object = new class_name();

Control Structures : 
_____________________

Used to define the flow of the program. 

There are 2 types of control structures known as

1) Branching

	if...else : Executes the statement(s) based on the condition. 

		if (condition) {
			statement(s);
		} else {
			statement(s);
		}

2) Looping 

	while loop : This loop executes all the statements repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. For every loop, basically there are 3 phases as

	(i) Initialization

	(ii) Condition 

	(iii) Increment/Decrement 

Initialization performed at the beginning of the loop. 

Condition performed at the conditional part of the loop. 

Increment/Decrement performed before closing the loop. 

while(condition) {
   statement(s);
}

For loop : This loop executes all the statement(s) repeatedly unti the condition remains true, if the condition remains false, then it comes out of the loop. 

for(initialization;condition;increment/decrement) {
...
...
...
}








































































































